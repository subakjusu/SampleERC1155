// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc1155

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Erc1155MetaData contains all meta data concerning the Erc1155 contract.
var Erc1155MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mintOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintOwnerWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintSelfBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"mintOwnerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintOwnerWithDataBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burnOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnCallerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burnOwnerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405180608001604052806050815260200162003699605091396200003d816200004460201b60201c565b5062000175565b80600290805190602001906200005c92919062000060565b5050565b8280546200006e906200013f565b90600052602060002090601f016020900481019282620000925760008555620000de565b82601f10620000ad57805160ff1916838001178555620000de565b82800160010185558215620000de579182015b82811115620000dd578251825591602001919060010190620000c0565b5b509050620000ed9190620000f1565b5090565b5b808211156200010c576000816000905550600101620000f2565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200015857607f821691505b602082108114156200016f576200016e62000110565b5b50919050565b61351480620001856000396000f3fe608060405234801561001057600080fd5b50600436106101155760003560e01c80635120f8ca116100a2578063a22cb46511610071578063a22cb465146102d6578063b67abf76146102f2578063d21491361461030e578063e985e9c51461032a578063f242432a1461035a57610115565b80635120f8ca146102665780635d5170b7146102825780635fbf37d21461029e5780636a01c116146102ba57610115565b80632eb2c2d6116100e95780632eb2c2d6146101c65780633180d9db146101e257806335ec38b3146101fe5780633d6fe97e1461021a5780634e1273f41461023657610115565b8062fdd58e1461011a57806301ffc9a71461014a5780630e89341c1461017a5780632d3a4f46146101aa575b600080fd5b610134600480360381019061012f9190611e7e565b610376565b6040516101419190611ecd565b60405180910390f35b610164600480360381019061015f9190611f40565b61043f565b6040516101719190611f88565b60405180910390f35b610194600480360381019061018f9190611fa3565b610521565b6040516101a19190612069565b60405180910390f35b6101c460048036038101906101bf91906121c0565b6105b5565b005b6101e060048036038101906101db919061230b565b6105c7565b005b6101fc60048036038101906101f791906123da565b610668565b005b61021860048036038101906102139190612495565b61067a565b005b610234600480360381019061022f91906124e8565b61068a565b005b610250600480360381019061024b91906125eb565b610699565b60405161025d9190612721565b60405180910390f35b610280600480360381019061027b9190612743565b6107b2565b005b61029c60048036038101906102979190612495565b6107c2565b005b6102b860048036038101906102b391906127ce565b6107e2565b005b6102d460048036038101906102cf9190612743565b610801565b005b6102f060048036038101906102eb9190612872565b610821565b005b61030c600480360381019061030791906127ce565b610837565b005b610328600480360381019061032391906124e8565b610846565b005b610344600480360381019061033f91906128b2565b610865565b6040516103519190611f88565b60405180910390f35b610374600480360381019061036f91906128f2565b6108f9565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de906129fb565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050a57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061051a57506105198261099a565b5b9050919050565b60606002805461053090612a4a565b80601f016020809104026020016040519081016040528092919081815260200182805461055c90612a4a565b80156105a95780601f1061057e576101008083540402835291602001916105a9565b820191906000526020600020905b81548152906001019060200180831161058c57829003601f168201915b50505050509050919050565b6105c182858584610a04565b50505050565b6105cf610b9a565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061061557506106148561060f610b9a565b610865565b5b610654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064b90612aee565b60405180910390fd5b6106618585858585610ba2565b5050505050565b61067482858584610eb6565b50505050565b6106858184846110d4565b505050565b6106953383836110d4565b5050565b606081518351146106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d690612b80565b60405180910390fd5b6000835167ffffffffffffffff8111156106fc576106fb612095565b5b60405190808252806020026020018201604052801561072a5781602001602082028036833780820191505090505b50905060005b84518110156107a75761077785828151811061074f5761074e612ba0565b5b602002602001015185838151811061076a57610769612ba0565b5b6020026020010151610376565b82828151811061078a57610789612ba0565b5b602002602001018181525050806107a090612bfe565b9050610730565b508091505092915050565b6107bd8184846112f1565b505050565b6107dd81848460405180602001604052806000815250610a04565b505050565b6107fd33838360405180602001604052806000815250610eb6565b5050565b61081c81848460405180602001604052806000815250610eb6565b505050565b61083361082c610b9a565b83836115a2565b5050565b6108423383836112f1565b5050565b61086133838360405180602001604052806000815250610a04565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610901610b9a565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610947575061094685610941610b9a565b610865565b5b610986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097d90612cb9565b60405180910390fd5b610993858585858561170f565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6b90612d4b565b60405180910390fd5b6000610a7e610b9a565b9050610a9f81600087610a9088611991565b610a9988611991565b87611a0b565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610afe9190612d6b565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051610b7c929190612dc1565b60405180910390a4610b9381600087878787611a13565b5050505050565b600033905090565b8151835114610be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdd90612e5c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d90612eee565b60405180910390fd5b6000610c60610b9a565b9050610c70818787878787611a0b565b60005b8451811015610e21576000858281518110610c9157610c90612ba0565b5b602002602001015190506000858381518110610cb057610caf612ba0565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4890612f80565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e069190612d6b565b9250508190555050505080610e1a90612bfe565b9050610c73565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610e98929190612fa0565b60405180910390a4610eae818787878787611beb565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90612d4b565b60405180910390fd5b8151835114610f6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6190612e5c565b60405180910390fd5b6000610f74610b9a565b9050610f8581600087878787611a0b565b60005b845181101561103e57838181518110610fa457610fa3612ba0565b5b6020026020010151600080878481518110610fc257610fc1612ba0565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110249190612d6b565b92505081905550808061103690612bfe565b915050610f88565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516110b6929190612fa0565b60405180910390a46110cd81600087878787611beb565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113b90613049565b60405180910390fd5b600061114e610b9a565b905061117e8185600061116087611991565b61116987611991565b60405180602001604052806000815250611a0b565b600080600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120c906130db565b60405180910390fd5b82810360008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516112e2929190612dc1565b60405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135890613049565b60405180910390fd5b80518251146113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90612e5c565b60405180910390fd5b60006113af610b9a565b90506113cf81856000868660405180602001604052806000815250611a0b565b60005b835181101561151c5760008482815181106113f0576113ef612ba0565b5b60200260200101519050600084838151811061140f5761140e612ba0565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156114b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a7906130db565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050808061151490612bfe565b9150506113d2565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611594929190612fa0565b60405180910390a450505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611611576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116089061316d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117029190611f88565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561177f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177690612eee565b60405180910390fd5b6000611789610b9a565b90506117a981878761179a88611991565b6117a388611991565b87611a0b565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015611840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183790612f80565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118f59190612d6b565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611972929190612dc1565b60405180910390a4611988828888888888611a13565b50505050505050565b60606000600167ffffffffffffffff8111156119b0576119af612095565b5b6040519080825280602002602001820160405280156119de5781602001602082028036833780820191505090505b50905082816000815181106119f6576119f5612ba0565b5b60200260200101818152505080915050919050565b505050505050565b611a328473ffffffffffffffffffffffffffffffffffffffff16611dc3565b15611be3578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611a789594939291906131f1565b6020604051808303816000875af1925050508015611ab457506040513d601f19601f82011682018060405250810190611ab19190613260565b60015b611b5a57611ac061329a565b806308c379a01415611b1d5750611ad56132bc565b80611ae05750611b1f565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b149190612069565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b51906133c4565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd890613456565b60405180910390fd5b505b505050505050565b611c0a8473ffffffffffffffffffffffffffffffffffffffff16611dc3565b15611dbb578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611c50959493929190613476565b6020604051808303816000875af1925050508015611c8c57506040513d601f19601f82011682018060405250810190611c899190613260565b60015b611d3257611c9861329a565b806308c379a01415611cf55750611cad6132bc565b80611cb85750611cf7565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cec9190612069565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d29906133c4565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db090613456565b60405180910390fd5b505b505050505050565b600080823b905060008111915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e1582611dea565b9050919050565b611e2581611e0a565b8114611e3057600080fd5b50565b600081359050611e4281611e1c565b92915050565b6000819050919050565b611e5b81611e48565b8114611e6657600080fd5b50565b600081359050611e7881611e52565b92915050565b60008060408385031215611e9557611e94611de0565b5b6000611ea385828601611e33565b9250506020611eb485828601611e69565b9150509250929050565b611ec781611e48565b82525050565b6000602082019050611ee26000830184611ebe565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f1d81611ee8565b8114611f2857600080fd5b50565b600081359050611f3a81611f14565b92915050565b600060208284031215611f5657611f55611de0565b5b6000611f6484828501611f2b565b91505092915050565b60008115159050919050565b611f8281611f6d565b82525050565b6000602082019050611f9d6000830184611f79565b92915050565b600060208284031215611fb957611fb8611de0565b5b6000611fc784828501611e69565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561200a578082015181840152602081019050611fef565b83811115612019576000848401525b50505050565b6000601f19601f8301169050919050565b600061203b82611fd0565b6120458185611fdb565b9350612055818560208601611fec565b61205e8161201f565b840191505092915050565b600060208201905081810360008301526120838184612030565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120cd8261201f565b810181811067ffffffffffffffff821117156120ec576120eb612095565b5b80604052505050565b60006120ff611dd6565b905061210b82826120c4565b919050565b600067ffffffffffffffff82111561212b5761212a612095565b5b6121348261201f565b9050602081019050919050565b82818337600083830152505050565b600061216361215e84612110565b6120f5565b90508281526020810184848401111561217f5761217e612090565b5b61218a848285612141565b509392505050565b600082601f8301126121a7576121a661208b565b5b81356121b7848260208601612150565b91505092915050565b600080600080608085870312156121da576121d9611de0565b5b60006121e887828801611e69565b94505060206121f987828801611e69565b935050604061220a87828801611e33565b925050606085013567ffffffffffffffff81111561222b5761222a611de5565b5b61223787828801612192565b91505092959194509250565b600067ffffffffffffffff82111561225e5761225d612095565b5b602082029050602081019050919050565b600080fd5b600061228761228284612243565b6120f5565b905080838252602082019050602084028301858111156122aa576122a961226f565b5b835b818110156122d357806122bf8882611e69565b8452602084019350506020810190506122ac565b5050509392505050565b600082601f8301126122f2576122f161208b565b5b8135612302848260208601612274565b91505092915050565b600080600080600060a0868803121561232757612326611de0565b5b600061233588828901611e33565b955050602061234688828901611e33565b945050604086013567ffffffffffffffff81111561236757612366611de5565b5b612373888289016122dd565b935050606086013567ffffffffffffffff81111561239457612393611de5565b5b6123a0888289016122dd565b925050608086013567ffffffffffffffff8111156123c1576123c0611de5565b5b6123cd88828901612192565b9150509295509295909350565b600080600080608085870312156123f4576123f3611de0565b5b600085013567ffffffffffffffff81111561241257612411611de5565b5b61241e878288016122dd565b945050602085013567ffffffffffffffff81111561243f5761243e611de5565b5b61244b878288016122dd565b935050604061245c87828801611e33565b925050606085013567ffffffffffffffff81111561247d5761247c611de5565b5b61248987828801612192565b91505092959194509250565b6000806000606084860312156124ae576124ad611de0565b5b60006124bc86828701611e69565b93505060206124cd86828701611e69565b92505060406124de86828701611e33565b9150509250925092565b600080604083850312156124ff576124fe611de0565b5b600061250d85828601611e69565b925050602061251e85828601611e69565b9150509250929050565b600067ffffffffffffffff82111561254357612542612095565b5b602082029050602081019050919050565b600061256761256284612528565b6120f5565b9050808382526020820190506020840283018581111561258a5761258961226f565b5b835b818110156125b3578061259f8882611e33565b84526020840193505060208101905061258c565b5050509392505050565b600082601f8301126125d2576125d161208b565b5b81356125e2848260208601612554565b91505092915050565b6000806040838503121561260257612601611de0565b5b600083013567ffffffffffffffff8111156126205761261f611de5565b5b61262c858286016125bd565b925050602083013567ffffffffffffffff81111561264d5761264c611de5565b5b612659858286016122dd565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61269881611e48565b82525050565b60006126aa838361268f565b60208301905092915050565b6000602082019050919050565b60006126ce82612663565b6126d8818561266e565b93506126e38361267f565b8060005b838110156127145781516126fb888261269e565b9750612706836126b6565b9250506001810190506126e7565b5085935050505092915050565b6000602082019050818103600083015261273b81846126c3565b905092915050565b60008060006060848603121561275c5761275b611de0565b5b600084013567ffffffffffffffff81111561277a57612779611de5565b5b612786868287016122dd565b935050602084013567ffffffffffffffff8111156127a7576127a6611de5565b5b6127b3868287016122dd565b92505060406127c486828701611e33565b9150509250925092565b600080604083850312156127e5576127e4611de0565b5b600083013567ffffffffffffffff81111561280357612802611de5565b5b61280f858286016122dd565b925050602083013567ffffffffffffffff8111156128305761282f611de5565b5b61283c858286016122dd565b9150509250929050565b61284f81611f6d565b811461285a57600080fd5b50565b60008135905061286c81612846565b92915050565b6000806040838503121561288957612888611de0565b5b600061289785828601611e33565b92505060206128a88582860161285d565b9150509250929050565b600080604083850312156128c9576128c8611de0565b5b60006128d785828601611e33565b92505060206128e885828601611e33565b9150509250929050565b600080600080600060a0868803121561290e5761290d611de0565b5b600061291c88828901611e33565b955050602061292d88828901611e33565b945050604061293e88828901611e69565b935050606061294f88828901611e69565b925050608086013567ffffffffffffffff8111156129705761296f611de5565b5b61297c88828901612192565b9150509295509295909350565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b60006129e5602b83611fdb565b91506129f082612989565b604082019050919050565b60006020820190508181036000830152612a14816129d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a6257607f821691505b60208210811415612a7657612a75612a1b565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612ad8603283611fdb565b9150612ae382612a7c565b604082019050919050565b60006020820190508181036000830152612b0781612acb565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612b6a602983611fdb565b9150612b7582612b0e565b604082019050919050565b60006020820190508181036000830152612b9981612b5d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c0982611e48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c3c57612c3b612bcf565b5b600182019050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000612ca3602983611fdb565b9150612cae82612c47565b604082019050919050565b60006020820190508181036000830152612cd281612c96565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d35602183611fdb565b9150612d4082612cd9565b604082019050919050565b60006020820190508181036000830152612d6481612d28565b9050919050565b6000612d7682611e48565b9150612d8183611e48565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612db657612db5612bcf565b5b828201905092915050565b6000604082019050612dd66000830185611ebe565b612de36020830184611ebe565b9392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000612e46602883611fdb565b9150612e5182612dea565b604082019050919050565b60006020820190508181036000830152612e7581612e39565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612ed8602583611fdb565b9150612ee382612e7c565b604082019050919050565b60006020820190508181036000830152612f0781612ecb565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000612f6a602a83611fdb565b9150612f7582612f0e565b604082019050919050565b60006020820190508181036000830152612f9981612f5d565b9050919050565b60006040820190508181036000830152612fba81856126c3565b90508181036020830152612fce81846126c3565b90509392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613033602383611fdb565b915061303e82612fd7565b604082019050919050565b6000602082019050818103600083015261306281613026565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006130c5602483611fdb565b91506130d082613069565b604082019050919050565b600060208201905081810360008301526130f4816130b8565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000613157602983611fdb565b9150613162826130fb565b604082019050919050565b600060208201905081810360008301526131868161314a565b9050919050565b61319681611e0a565b82525050565b600081519050919050565b600082825260208201905092915050565b60006131c38261319c565b6131cd81856131a7565b93506131dd818560208601611fec565b6131e68161201f565b840191505092915050565b600060a082019050613206600083018861318d565b613213602083018761318d565b6132206040830186611ebe565b61322d6060830185611ebe565b818103608083015261323f81846131b8565b90509695505050505050565b60008151905061325a81611f14565b92915050565b60006020828403121561327657613275611de0565b5b60006132848482850161324b565b91505092915050565b60008160e01c9050919050565b600060033d11156132b95760046000803e6132b660005161328d565b90505b90565b600060443d10156132cc5761334f565b6132d4611dd6565b60043d036004823e80513d602482011167ffffffffffffffff821117156132fc57505061334f565b808201805167ffffffffffffffff81111561331a575050505061334f565b80602083010160043d03850181111561333757505050505061334f565b613346826020018501866120c4565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006133ae603483611fdb565b91506133b982613352565b604082019050919050565b600060208201905081810360008301526133dd816133a1565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000613440602883611fdb565b915061344b826133e4565b604082019050919050565b6000602082019050818103600083015261346f81613433565b9050919050565b600060a08201905061348b600083018861318d565b613498602083018761318d565b81810360408301526134aa81866126c3565b905081810360608301526134be81856126c3565b905081810360808301526134d281846131b8565b9050969550505050505056fea2646970667358221220e689a424698e8257fa7b424accf4611a310fe64efa4c72fc5d10eafde61987d964736f6c634300080b003368747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f737562616b6a7573752f53616d706c65455243313135352f6d61737465722f746f6b656e2f7b69647d2e6a736f6e",
}

// Erc1155ABI is the input ABI used to generate the binding from.
// Deprecated: Use Erc1155MetaData.ABI instead.
var Erc1155ABI = Erc1155MetaData.ABI

// Erc1155Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Erc1155MetaData.Bin instead.
var Erc1155Bin = Erc1155MetaData.Bin

// DeployErc1155 deploys a new Ethereum contract, binding an instance of Erc1155 to it.
func DeployErc1155(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Erc1155, error) {
	parsed, err := Erc1155MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Erc1155Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Erc1155{Erc1155Caller: Erc1155Caller{contract: contract}, Erc1155Transactor: Erc1155Transactor{contract: contract}, Erc1155Filterer: Erc1155Filterer{contract: contract}}, nil
}

// Erc1155 is an auto generated Go binding around an Ethereum contract.
type Erc1155 struct {
	Erc1155Caller     // Read-only binding to the contract
	Erc1155Transactor // Write-only binding to the contract
	Erc1155Filterer   // Log filterer for contract events
}

// Erc1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type Erc1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Erc1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Erc1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Erc1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Erc1155Session struct {
	Contract     *Erc1155          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Erc1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Erc1155CallerSession struct {
	Contract *Erc1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// Erc1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Erc1155TransactorSession struct {
	Contract     *Erc1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// Erc1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type Erc1155Raw struct {
	Contract *Erc1155 // Generic contract binding to access the raw methods on
}

// Erc1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Erc1155CallerRaw struct {
	Contract *Erc1155Caller // Generic read-only contract binding to access the raw methods on
}

// Erc1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Erc1155TransactorRaw struct {
	Contract *Erc1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewErc1155 creates a new instance of Erc1155, bound to a specific deployed contract.
func NewErc1155(address common.Address, backend bind.ContractBackend) (*Erc1155, error) {
	contract, err := bindErc1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Erc1155{Erc1155Caller: Erc1155Caller{contract: contract}, Erc1155Transactor: Erc1155Transactor{contract: contract}, Erc1155Filterer: Erc1155Filterer{contract: contract}}, nil
}

// NewErc1155Caller creates a new read-only instance of Erc1155, bound to a specific deployed contract.
func NewErc1155Caller(address common.Address, caller bind.ContractCaller) (*Erc1155Caller, error) {
	contract, err := bindErc1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Erc1155Caller{contract: contract}, nil
}

// NewErc1155Transactor creates a new write-only instance of Erc1155, bound to a specific deployed contract.
func NewErc1155Transactor(address common.Address, transactor bind.ContractTransactor) (*Erc1155Transactor, error) {
	contract, err := bindErc1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Erc1155Transactor{contract: contract}, nil
}

// NewErc1155Filterer creates a new log filterer instance of Erc1155, bound to a specific deployed contract.
func NewErc1155Filterer(address common.Address, filterer bind.ContractFilterer) (*Erc1155Filterer, error) {
	contract, err := bindErc1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Erc1155Filterer{contract: contract}, nil
}

// bindErc1155 binds a generic wrapper to an already deployed contract.
func bindErc1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Erc1155ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc1155 *Erc1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc1155.Contract.Erc1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc1155 *Erc1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc1155.Contract.Erc1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc1155 *Erc1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc1155.Contract.Erc1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Erc1155 *Erc1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Erc1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Erc1155 *Erc1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Erc1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Erc1155 *Erc1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Erc1155.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Erc1155 *Erc1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Erc1155.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Erc1155 *Erc1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Erc1155.Contract.BalanceOf(&_Erc1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Erc1155 *Erc1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Erc1155.Contract.BalanceOf(&_Erc1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Erc1155 *Erc1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Erc1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Erc1155 *Erc1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Erc1155.Contract.BalanceOfBatch(&_Erc1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Erc1155 *Erc1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Erc1155.Contract.BalanceOfBatch(&_Erc1155.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Erc1155 *Erc1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Erc1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Erc1155 *Erc1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Erc1155.Contract.IsApprovedForAll(&_Erc1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Erc1155 *Erc1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Erc1155.Contract.IsApprovedForAll(&_Erc1155.CallOpts, account, operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc1155 *Erc1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Erc1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc1155 *Erc1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc1155.Contract.SupportsInterface(&_Erc1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Erc1155 *Erc1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Erc1155.Contract.SupportsInterface(&_Erc1155.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Erc1155 *Erc1155Caller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Erc1155.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Erc1155 *Erc1155Session) Uri(arg0 *big.Int) (string, error) {
	return _Erc1155.Contract.Uri(&_Erc1155.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_Erc1155 *Erc1155CallerSession) Uri(arg0 *big.Int) (string, error) {
	return _Erc1155.Contract.Uri(&_Erc1155.CallOpts, arg0)
}

// BurnCaller is a paid mutator transaction binding the contract method 0x3d6fe97e.
//
// Solidity: function burnCaller(uint256 tokenId, uint256 amount) returns()
func (_Erc1155 *Erc1155Transactor) BurnCaller(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "burnCaller", tokenId, amount)
}

// BurnCaller is a paid mutator transaction binding the contract method 0x3d6fe97e.
//
// Solidity: function burnCaller(uint256 tokenId, uint256 amount) returns()
func (_Erc1155 *Erc1155Session) BurnCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnCaller(&_Erc1155.TransactOpts, tokenId, amount)
}

// BurnCaller is a paid mutator transaction binding the contract method 0x3d6fe97e.
//
// Solidity: function burnCaller(uint256 tokenId, uint256 amount) returns()
func (_Erc1155 *Erc1155TransactorSession) BurnCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnCaller(&_Erc1155.TransactOpts, tokenId, amount)
}

// BurnCallerBatch is a paid mutator transaction binding the contract method 0xb67abf76.
//
// Solidity: function burnCallerBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Erc1155 *Erc1155Transactor) BurnCallerBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "burnCallerBatch", tokenIds, amounts)
}

// BurnCallerBatch is a paid mutator transaction binding the contract method 0xb67abf76.
//
// Solidity: function burnCallerBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Erc1155 *Erc1155Session) BurnCallerBatch(tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnCallerBatch(&_Erc1155.TransactOpts, tokenIds, amounts)
}

// BurnCallerBatch is a paid mutator transaction binding the contract method 0xb67abf76.
//
// Solidity: function burnCallerBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Erc1155 *Erc1155TransactorSession) BurnCallerBatch(tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnCallerBatch(&_Erc1155.TransactOpts, tokenIds, amounts)
}

// BurnOwner is a paid mutator transaction binding the contract method 0x35ec38b3.
//
// Solidity: function burnOwner(uint256 tokenId, uint256 amount, address owner) returns()
func (_Erc1155 *Erc1155Transactor) BurnOwner(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "burnOwner", tokenId, amount, owner)
}

// BurnOwner is a paid mutator transaction binding the contract method 0x35ec38b3.
//
// Solidity: function burnOwner(uint256 tokenId, uint256 amount, address owner) returns()
func (_Erc1155 *Erc1155Session) BurnOwner(tokenId *big.Int, amount *big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnOwner(&_Erc1155.TransactOpts, tokenId, amount, owner)
}

// BurnOwner is a paid mutator transaction binding the contract method 0x35ec38b3.
//
// Solidity: function burnOwner(uint256 tokenId, uint256 amount, address owner) returns()
func (_Erc1155 *Erc1155TransactorSession) BurnOwner(tokenId *big.Int, amount *big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnOwner(&_Erc1155.TransactOpts, tokenId, amount, owner)
}

// BurnOwnerBatch is a paid mutator transaction binding the contract method 0x5120f8ca.
//
// Solidity: function burnOwnerBatch(uint256[] tokenIds, uint256[] amounts, address owner) returns()
func (_Erc1155 *Erc1155Transactor) BurnOwnerBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "burnOwnerBatch", tokenIds, amounts, owner)
}

// BurnOwnerBatch is a paid mutator transaction binding the contract method 0x5120f8ca.
//
// Solidity: function burnOwnerBatch(uint256[] tokenIds, uint256[] amounts, address owner) returns()
func (_Erc1155 *Erc1155Session) BurnOwnerBatch(tokenIds []*big.Int, amounts []*big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnOwnerBatch(&_Erc1155.TransactOpts, tokenIds, amounts, owner)
}

// BurnOwnerBatch is a paid mutator transaction binding the contract method 0x5120f8ca.
//
// Solidity: function burnOwnerBatch(uint256[] tokenIds, uint256[] amounts, address owner) returns()
func (_Erc1155 *Erc1155TransactorSession) BurnOwnerBatch(tokenIds []*big.Int, amounts []*big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.BurnOwnerBatch(&_Erc1155.TransactOpts, tokenIds, amounts, owner)
}

// MintCaller is a paid mutator transaction binding the contract method 0xd2149136.
//
// Solidity: function mintCaller(uint256 tokenId, uint256 amount) returns()
func (_Erc1155 *Erc1155Transactor) MintCaller(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "mintCaller", tokenId, amount)
}

// MintCaller is a paid mutator transaction binding the contract method 0xd2149136.
//
// Solidity: function mintCaller(uint256 tokenId, uint256 amount) returns()
func (_Erc1155 *Erc1155Session) MintCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.MintCaller(&_Erc1155.TransactOpts, tokenId, amount)
}

// MintCaller is a paid mutator transaction binding the contract method 0xd2149136.
//
// Solidity: function mintCaller(uint256 tokenId, uint256 amount) returns()
func (_Erc1155 *Erc1155TransactorSession) MintCaller(tokenId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.MintCaller(&_Erc1155.TransactOpts, tokenId, amount)
}

// MintOwner is a paid mutator transaction binding the contract method 0x5d5170b7.
//
// Solidity: function mintOwner(uint256 tokenId, uint256 amount, address owner) returns()
func (_Erc1155 *Erc1155Transactor) MintOwner(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "mintOwner", tokenId, amount, owner)
}

// MintOwner is a paid mutator transaction binding the contract method 0x5d5170b7.
//
// Solidity: function mintOwner(uint256 tokenId, uint256 amount, address owner) returns()
func (_Erc1155 *Erc1155Session) MintOwner(tokenId *big.Int, amount *big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwner(&_Erc1155.TransactOpts, tokenId, amount, owner)
}

// MintOwner is a paid mutator transaction binding the contract method 0x5d5170b7.
//
// Solidity: function mintOwner(uint256 tokenId, uint256 amount, address owner) returns()
func (_Erc1155 *Erc1155TransactorSession) MintOwner(tokenId *big.Int, amount *big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwner(&_Erc1155.TransactOpts, tokenId, amount, owner)
}

// MintOwnerBatch is a paid mutator transaction binding the contract method 0x6a01c116.
//
// Solidity: function mintOwnerBatch(uint256[] tokenIds, uint256[] amounts, address owner) returns()
func (_Erc1155 *Erc1155Transactor) MintOwnerBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "mintOwnerBatch", tokenIds, amounts, owner)
}

// MintOwnerBatch is a paid mutator transaction binding the contract method 0x6a01c116.
//
// Solidity: function mintOwnerBatch(uint256[] tokenIds, uint256[] amounts, address owner) returns()
func (_Erc1155 *Erc1155Session) MintOwnerBatch(tokenIds []*big.Int, amounts []*big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwnerBatch(&_Erc1155.TransactOpts, tokenIds, amounts, owner)
}

// MintOwnerBatch is a paid mutator transaction binding the contract method 0x6a01c116.
//
// Solidity: function mintOwnerBatch(uint256[] tokenIds, uint256[] amounts, address owner) returns()
func (_Erc1155 *Erc1155TransactorSession) MintOwnerBatch(tokenIds []*big.Int, amounts []*big.Int, owner common.Address) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwnerBatch(&_Erc1155.TransactOpts, tokenIds, amounts, owner)
}

// MintOwnerWithData is a paid mutator transaction binding the contract method 0x2d3a4f46.
//
// Solidity: function mintOwnerWithData(uint256 tokenId, uint256 amount, address owner, bytes data) returns()
func (_Erc1155 *Erc1155Transactor) MintOwnerWithData(opts *bind.TransactOpts, tokenId *big.Int, amount *big.Int, owner common.Address, data []byte) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "mintOwnerWithData", tokenId, amount, owner, data)
}

// MintOwnerWithData is a paid mutator transaction binding the contract method 0x2d3a4f46.
//
// Solidity: function mintOwnerWithData(uint256 tokenId, uint256 amount, address owner, bytes data) returns()
func (_Erc1155 *Erc1155Session) MintOwnerWithData(tokenId *big.Int, amount *big.Int, owner common.Address, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwnerWithData(&_Erc1155.TransactOpts, tokenId, amount, owner, data)
}

// MintOwnerWithData is a paid mutator transaction binding the contract method 0x2d3a4f46.
//
// Solidity: function mintOwnerWithData(uint256 tokenId, uint256 amount, address owner, bytes data) returns()
func (_Erc1155 *Erc1155TransactorSession) MintOwnerWithData(tokenId *big.Int, amount *big.Int, owner common.Address, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwnerWithData(&_Erc1155.TransactOpts, tokenId, amount, owner, data)
}

// MintOwnerWithDataBatch is a paid mutator transaction binding the contract method 0x3180d9db.
//
// Solidity: function mintOwnerWithDataBatch(uint256[] tokenIds, uint256[] amounts, address owner, bytes data) returns()
func (_Erc1155 *Erc1155Transactor) MintOwnerWithDataBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int, owner common.Address, data []byte) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "mintOwnerWithDataBatch", tokenIds, amounts, owner, data)
}

// MintOwnerWithDataBatch is a paid mutator transaction binding the contract method 0x3180d9db.
//
// Solidity: function mintOwnerWithDataBatch(uint256[] tokenIds, uint256[] amounts, address owner, bytes data) returns()
func (_Erc1155 *Erc1155Session) MintOwnerWithDataBatch(tokenIds []*big.Int, amounts []*big.Int, owner common.Address, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwnerWithDataBatch(&_Erc1155.TransactOpts, tokenIds, amounts, owner, data)
}

// MintOwnerWithDataBatch is a paid mutator transaction binding the contract method 0x3180d9db.
//
// Solidity: function mintOwnerWithDataBatch(uint256[] tokenIds, uint256[] amounts, address owner, bytes data) returns()
func (_Erc1155 *Erc1155TransactorSession) MintOwnerWithDataBatch(tokenIds []*big.Int, amounts []*big.Int, owner common.Address, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.MintOwnerWithDataBatch(&_Erc1155.TransactOpts, tokenIds, amounts, owner, data)
}

// MintSelfBatch is a paid mutator transaction binding the contract method 0x5fbf37d2.
//
// Solidity: function mintSelfBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Erc1155 *Erc1155Transactor) MintSelfBatch(opts *bind.TransactOpts, tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "mintSelfBatch", tokenIds, amounts)
}

// MintSelfBatch is a paid mutator transaction binding the contract method 0x5fbf37d2.
//
// Solidity: function mintSelfBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Erc1155 *Erc1155Session) MintSelfBatch(tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.MintSelfBatch(&_Erc1155.TransactOpts, tokenIds, amounts)
}

// MintSelfBatch is a paid mutator transaction binding the contract method 0x5fbf37d2.
//
// Solidity: function mintSelfBatch(uint256[] tokenIds, uint256[] amounts) returns()
func (_Erc1155 *Erc1155TransactorSession) MintSelfBatch(tokenIds []*big.Int, amounts []*big.Int) (*types.Transaction, error) {
	return _Erc1155.Contract.MintSelfBatch(&_Erc1155.TransactOpts, tokenIds, amounts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Erc1155 *Erc1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Erc1155 *Erc1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.SafeBatchTransferFrom(&_Erc1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Erc1155 *Erc1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.SafeBatchTransferFrom(&_Erc1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Erc1155 *Erc1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Erc1155 *Erc1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.SafeTransferFrom(&_Erc1155.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Erc1155 *Erc1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Erc1155.Contract.SafeTransferFrom(&_Erc1155.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Erc1155 *Erc1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Erc1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Erc1155 *Erc1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Erc1155.Contract.SetApprovalForAll(&_Erc1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Erc1155 *Erc1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Erc1155.Contract.SetApprovalForAll(&_Erc1155.TransactOpts, operator, approved)
}

// Erc1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Erc1155 contract.
type Erc1155ApprovalForAllIterator struct {
	Event *Erc1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc1155ApprovalForAll represents a ApprovalForAll event raised by the Erc1155 contract.
type Erc1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Erc1155 *Erc1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*Erc1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Erc1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &Erc1155ApprovalForAllIterator{contract: _Erc1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Erc1155 *Erc1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *Erc1155ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Erc1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc1155ApprovalForAll)
				if err := _Erc1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Erc1155 *Erc1155Filterer) ParseApprovalForAll(log types.Log) (*Erc1155ApprovalForAll, error) {
	event := new(Erc1155ApprovalForAll)
	if err := _Erc1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Erc1155 contract.
type Erc1155TransferBatchIterator struct {
	Event *Erc1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc1155TransferBatch represents a TransferBatch event raised by the Erc1155 contract.
type Erc1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Erc1155 *Erc1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*Erc1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Erc1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Erc1155TransferBatchIterator{contract: _Erc1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Erc1155 *Erc1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *Erc1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Erc1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc1155TransferBatch)
				if err := _Erc1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Erc1155 *Erc1155Filterer) ParseTransferBatch(log types.Log) (*Erc1155TransferBatch, error) {
	event := new(Erc1155TransferBatch)
	if err := _Erc1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Erc1155 contract.
type Erc1155TransferSingleIterator struct {
	Event *Erc1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc1155TransferSingle represents a TransferSingle event raised by the Erc1155 contract.
type Erc1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Erc1155 *Erc1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*Erc1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Erc1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Erc1155TransferSingleIterator{contract: _Erc1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Erc1155 *Erc1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *Erc1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Erc1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc1155TransferSingle)
				if err := _Erc1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Erc1155 *Erc1155Filterer) ParseTransferSingle(log types.Log) (*Erc1155TransferSingle, error) {
	event := new(Erc1155TransferSingle)
	if err := _Erc1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Erc1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Erc1155 contract.
type Erc1155URIIterator struct {
	Event *Erc1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Erc1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Erc1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Erc1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Erc1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Erc1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Erc1155URI represents a URI event raised by the Erc1155 contract.
type Erc1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Erc1155 *Erc1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*Erc1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Erc1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &Erc1155URIIterator{contract: _Erc1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Erc1155 *Erc1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *Erc1155URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Erc1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Erc1155URI)
				if err := _Erc1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Erc1155 *Erc1155Filterer) ParseURI(log types.Log) (*Erc1155URI, error) {
	event := new(Erc1155URI)
	if err := _Erc1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
